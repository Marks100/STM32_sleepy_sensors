#!/usr/bin/env ruby

# Add to require search path
$: << "/SVN_source/Tools/RubyScripts"

require 'docopt'
require 'nokogiri'
require 'erb'
require 'set'
require 'yaml'
require 'FileUtils'

# Grab just the filename for convenience
NAME = File.basename($0)
PTLD = File.expand_path(ENV['PTLD'])
RX_ABS_PATH = /[A-Za-z]:[\/\\]/

# Version information string
VERSION_NUM = "1.0.1.RC"
VERSION = <<END_VERSION
########################################################################
#  #{NAME} #{VERSION_NUM}
#  Parses a Ceedling xml report file and converts to a fancy html report
#  Copyright (C) 2015 Sensata Technologies.
########################################################################
END_VERSION

# Build the options!  Notice that #{VERSION} will include a newline at end
DOC_OPT = <<DOCOPT
#{VERSION}
Usage:
  #{NAME} <CeedlingReportFile.xml> <CeedlingReportFile.html>
  #{NAME} -h | --help
  #{NAME} --version

Options:
  --version                 Show version info.
  -h --help                 Show this screen.
DOCOPT

#***************************************************************************************************
#   \brief          Parses xml for test suites & test cases, pulls together stats and generates html report
#***************************************************************************************************
class CeedlingResultsHTMLCreator
  attr_accessor :list_of_test_cases, :ceedling_xml_filename, :html_report_filename, :test_time, :list_of_test_suites

  def initialize(xml_report, html_report)
    @test_time
	@ceedling_xml_filename = xml_report
	@html_report_filename = html_report
  @report_dir = File.expand_path(File.dirname(@html_report_filename))
    @list_of_test_cases = []
    @list_of_test_suites = []
    @stats
	@set_test_suites  = Set.new
	@set_passed_test_suites  = Set.new
	@set_failed_test_suites  = Set.new
	@set_ignored_test_suites  = Set.new
  end

  def create_test_suite_list
    count = 1
    results = Nokogiri::XML(open(@ceedling_xml_filename))
    results.xpath('//TestRun/SuccessfulTests/*').each  do |node|
      if node.name.eql?("Test")
        node_name = "#{node.name}[#{count}]"
		test_suite = results.xpath("//TestRun/SuccessfulTests/#{node_name}/Name").first.content.split("::").first.split("/").last

		@set_test_suites.add(test_suite)
	    count += 1
	  end
	end

    count = 1
    results.xpath('//TestRun/FailedTests/*').each  do |node|
      if node.name.eql?("FailedTest")
        node_name = "#{node.name}[#{count}]"
		test_suite = results.xpath("//TestRun/FailedTests/#{node_name}/Name").first.content.split("::").first.split("/").last

		@set_test_suites.add(test_suite)
	    count += 1
	  end
	end

    count = 1
    results.xpath('//TestRun/IgnoredTests/*').each  do |node|
      if node.name.eql?("Test")
        node_name = "#{node.name}[#{count}]"
		test_suite = results.xpath("//TestRun/IgnoredTests/#{node_name}/Name").first.content.split("::").first.split("/").last

		@set_test_suites.add(test_suite)
	    count += 1
	  end
	end

	# for each test set find all test case
	@set_test_suites.each do |suite_name|
		@list_of_test_suites << TestSuite.new( suite_name )
	end

	@list_of_test_suites.each do |suite|
		@list_of_test_cases.each do |testcase|
			if( suite.name == testcase.suite )
				suite.add_test_case( testcase )
			end
		end
		# puts suite.to_s
	end

  end

  def create_test_case_list
    results = Nokogiri::XML(open(@ceedling_xml_filename))

	@test_time = File.mtime(@ceedling_xml_filename)

    count = 1
    results.xpath('//TestRun/SuccessfulTests/*').each  do |node|
      if node.name.eql?("Test")
          node_name = "#{node.name}[#{count}]"
          name = results.xpath("//TestRun/SuccessfulTests/#{node_name}").first.content
		  test_case = results.xpath("//TestRun/SuccessfulTests/#{node_name}/Name").first.content

		  # puts results.xpath("//TestRun/SuccessfulTests/#{node_name}/Name")

		  test_case_name = test_case.split("::").last
		  suite = test_case.split("::").first.split("/").last
		  test_level = test_case.split("::").first.split("/").first
		  ceedling_id = results.xpath("//TestRun/SuccessfulTests/#{node_name}").attr('id')
		  result = "Pass"

		  this_test_case = TestCase.new(test_case_name, test_level, suite, ceedling_id, result)

          @list_of_test_cases << this_test_case
          count+=1
        end
      end

    count = 1
    results.xpath('//TestRun/FailedTests/*').each  do |node|
      if node.name.eql?("FailedTest")
          node_name = "#{node.name}[#{count}]"
          name = results.xpath("//TestRun/FailedTests/#{node_name}").first.content
		  test_case = results.xpath("//TestRun/FailedTests/#{node_name}/Name").first.content

		  # puts results.xpath("//TestRun/FailedTests/#{node_name}/Name")


		  test_case_name = test_case.split("::").last
		  suite = test_case.split("::").first.split("/").last
		  test_level = test_case.split("::").first.split("/").first
		  ceedling_id = results.xpath("//TestRun/FailedTests/#{node_name}").attr('id')
		  result = "Fail"

		  # puts test_case_name

          @list_of_test_cases << TestCase.new(test_case_name, test_level, suite, ceedling_id, result)
          count+=1
        end
      end

    count = 1
    results.xpath('//TestRun/IgnoredTests/*').each  do |node|
      if node.name.eql?("Test")
          node_name = "#{node.name}[#{count}]"
          name = results.xpath("//TestRun/IgnoredTests/#{node_name}").first.content
		  test_case = results.xpath("//TestRun/IgnoredTests/#{node_name}/Name").first.content

		  test_case_name = test_case.split("::").last
		  suite = test_case.split("::").first.split("/").last
		  test_level = test_case.split("::").first.split("/").first
		  ceedling_id = results.xpath("//TestRun/IgnoredTests/#{node_name}").attr('id')
		  result = "Ignored"

          @list_of_test_cases << TestCase.new(test_case_name, test_level, suite, ceedling_id, result)
          count+=1
        end
      end



    end

   def update_stats
   	  # extract stats
    results = Nokogiri::XML(open(@ceedling_xml_filename))
	  tests = results.xpath("//TestRun/Statistics/Tests").first.content
	  failed = results.xpath("//TestRun/Statistics/FailuresTotal").first.content
	  ignored = results.xpath("//TestRun/Statistics/Ignores").first.content
	  passed = tests.to_i - failed.to_i - ignored.to_i

	  @stats = TestStats.new( @list_of_test_suites, @list_of_test_cases, tests, passed, failed, ignored)
	  # puts @stats.to_s;

	@list_of_test_suites.each do |suite|
		#update stats
		if( suite.result == "Pass" )
			@stats.ts_passed += 1
		end
	end

   end

   def convert_results_erb_html_file
       template_file = File.open("#{File.dirname(__FILE__)}/templates/CeedlingReportTemplate.htm.erb", 'r').read
       erb = ERB.new(template_file)
       File.open(@html_report_filename, 'w+') { |file| file.write(erb.result(binding)) }
   end

   def output_yml_summary
        summary = {}

        summary['projectInfo'] = {}
        summary['projectInfo']['name'] = ENV["PROJECT_NAME"]
        summary['projectInfo']['subSysName'] = ENV["SUBSYS_NAME"]
        summary['projectInfo']['swcName'] = ENV["SWC_NAME"]
        summary['projectInfo']['version'] = ENV["VERSION"]
        summary['projectInfo']['testTime'] = @test_time
        summary['projectInfo']['user'] = ENV["USER"]

        summary['unit'] = {}
        summary['unit']['testSuites'] = @stats.unit_test.test_suites
        summary['unit']['testSuitesPassed'] = @stats.unit_test.ts_passed
        summary['unit']['testSuitesFailed'] = @stats.unit_test.ts_failed
        summary['unit']['testCases'] = @stats.unit_test.test_cases
        summary['unit']['testCasesPassed'] = @stats.unit_test.tc_passed
        summary['unit']['testCasesFailed'] = @stats.unit_test.tc_failed
        summary['unit']['testCasesIgnored'] = @stats.unit_test.tc_ignored

        if( @stats.unit_test.test_cases == 0 )
            result="NotTested"
        elsif ( @stats.unit_test.tc_failed > 0 )
            result="Fail"
        else
            result="Pass"
        end
        summary['unit']['result']=result

        summary['softwareIntegrationTest'] = {}
        summary['softwareIntegrationTest']['testSuites'] = @stats.sw_int_test.test_suites
        summary['softwareIntegrationTest']['testSuitesPassed'] = @stats.sw_int_test.ts_passed
        summary['softwareIntegrationTest']['testSuitesFailed'] = @stats.sw_int_test.ts_failed
        summary['softwareIntegrationTest']['testCases'] = @stats.sw_int_test.test_cases
        summary['softwareIntegrationTest']['testCasesPassed'] = @stats.sw_int_test.tc_passed
        summary['softwareIntegrationTest']['testCasesFailed'] = @stats.sw_int_test.tc_failed
        summary['softwareIntegrationTest']['testCasesIgnored'] = @stats.sw_int_test.tc_ignored

        if( @stats.sw_int_test.test_cases == 0 )
            result="NotTested"
        elsif ( @stats.sw_int_test.tc_failed > 0 )
            result="Fail"
        else
            result="Pass"
        end
        summary['softwareIntegrationTest']['result']=result

        summary['softwareTest'] = {}
        summary['softwareTest']['testSuites'] = @stats.sw_test.test_suites
        summary['softwareTest']['testSuitesPassed'] = @stats.sw_test.ts_passed
        summary['softwareTest']['testSuitesFailed'] = @stats.sw_test.ts_failed
        summary['softwareTest']['testCases'] = @stats.sw_test.test_cases
        summary['softwareTest']['testCasesPassed'] = @stats.sw_test.tc_passed
        summary['softwareTest']['testCasesFailed'] = @stats.sw_test.tc_failed
        summary['softwareTest']['testCasesIgnored'] = @stats.sw_test.tc_ignored

        if( @stats.sw_test.test_cases == 0 )
            result="NotTested"
        elsif ( @stats.sw_test.tc_failed > 0 )
            result="Fail"
        else
            result="Pass"
        end
        summary['softwareTest']['result']=result

        summary['scenarioTest'] = {}
        summary['scenarioTest']['testSuites'] = @stats.scenario_test.test_suites
        summary['scenarioTest']['testSuitesPassed'] = @stats.scenario_test.ts_passed
        summary['scenarioTest']['testSuitesFailed'] = @stats.scenario_test.ts_failed
        summary['scenarioTest']['testCases'] = @stats.scenario_test.test_cases
        summary['scenarioTest']['testCasesPassed'] = @stats.scenario_test.tc_passed
        summary['scenarioTest']['testCasesFailed'] = @stats.scenario_test.tc_failed
        summary['scenarioTest']['testCasesIgnored'] = @stats.scenario_test.tc_ignored

        if( @stats.scenario_test.test_cases == 0 )
            result="NotTested"
        elsif ( @stats.scenario_test.tc_failed > 0 )
            result="Fail"
        else
            result="Pass"
        end
        summary['scenarioTest']['result']=result

        summary['otherTest'] = {}
        summary['otherTest']['testSuites'] = @stats.other_test.test_suites
        summary['otherTest']['testSuitesPassed'] = @stats.other_test.ts_passed
        summary['otherTest']['testSuitesFailed'] = @stats.other_test.ts_failed
        summary['otherTest']['testCases'] = @stats.other_test.test_cases
        summary['otherTest']['testCasesPassed'] = @stats.other_test.tc_passed
        summary['otherTest']['testCasesFailed'] = @stats.other_test.tc_failed
        summary['otherTest']['testCasesIgnored'] = @stats.other_test.tc_ignored

        if( @stats.other_test.test_cases == 0 )
            result="NotTested"
        elsif ( @stats.other_test.tc_failed > 0 )
            result="Fail"
        else
            result="Pass"
        end
        summary['otherTest']['result']=result

        FileUtils.mkdir_p( @report_dir )

        # change working directory and do all our work in Test Results directory
        begin
          Dir.chdir @report_dir
        rescue
          puts "Warning: Expecting dir #{@report_dir} to exist, please create"
        end

        begin
          FileUtils.rm("CeedlingTestSummary.yml")
        rescue
          # not found so OK
        end

        begin
          File.open("#{@report_dir}/CeedlingTestSummary.yml", 'w') {|f| f.write summary.to_yaml } #Store
        rescue
          puts "Warning: unable to write to #{@report_dir}/CeedlingTestSummary.yml"
        end
   end
end

#***************************************************************************************************
#   \brief          TestLevel is Unit, Integration, Sw Test, Scenario etc...
#***************************************************************************************************
class TestLevel
  attr_reader :name, :ts_total, :ts_passed, :ts_failed, :ts_ignored, :result, :list_of_test_suites
  def initialize(name)
    @name = name
	@list_of_test_suites = []
    @ts_total = 0
    @ts_passed = 0
    @ts_failed = 0
    @ts_ignored = 0
	@result = "Unknown"
  end

  def add_test_suite(name)
	@list_of_test_suites << name
    @ts_total += 1
	if name.result == "Pass"
		@ts_passed += 1
	end
	if( name.result == "Fail" )
		@ts_failed += 1
	end
	if( name.result == "Ignored" )
		@ts_ignored += 1
	end

	if( @ts_failed > 0 )
		@result = "Fail"
	elsif ( @ts_passed > 0 )
		@result = "Pass"
	else
		@result = "Ignored"
	end

  end

   def to_s()
    string = @name
	@list_of_test_suites.each do |testsuite|
		string += testsuite.name + "\n"
	end

	string
  end

end

#***************************************************************************************************
#   \brief          Collects test cases with test suite, calcs test suite status
#***************************************************************************************************
class TestSuite
  attr_reader :name, :tc_total, :tc_passed, :tc_failed, :tc_ignored, :result, :list_of_test_cases, :test_level
  def initialize(name)
    @name = name
	@list_of_test_cases = []
    @tc_total = 0
    @tc_passed = 0
    @tc_failed = 0
    @tc_ignored = 0
	@result = "Unknown"
	@test_level = "Unknown"
  end

  def add_test_case(name)
	@list_of_test_cases << name
    @tc_total += 1
	if name.result == "Pass"
		@tc_passed += 1
	end
	if( name.result == "Fail" )
		@tc_failed += 1
	end
	if( name.result == "Ignored" )
		@tc_ignored += 1
	end

	if( @tc_failed > 0 )
		@result = "Fail"
	elsif( tc_passed > 0 )
		@result = "Pass"
	else
		@result = "Ignored"
	end

	# set test suite level to 1st test case level
	if( @test_level == "Unknown" )
		@test_level = name.test_level
	end

  end

   def to_s()
    string = "Test Suite:#{@name}"
	@list_of_test_cases.each do |testcase|
		string += "\n" + testcase.name
	end

	string
  end

end

#***************************************************************************************************
#   \brief          Stores Test Case information
#***************************************************************************************************
class TestCase
  attr_reader :name, :suite, :ceedling_id, :result, :test_level
  def initialize(name, test_level, suite, ceedling_id, result)
    @name = name
    @test_level = test_level
    @suite = suite
    @ceedling_id = ceedling_id
    @result = result
  end
  def to_s()
    string = "Name:" + @name + ", Level:" + @test_level + ", Suite:" + @suite + ", Id:" + @ceedling_id + ", Result:" + @result
  end
end

#***************************************************************************************************
#   \brief          Stores Test Statistics
#***************************************************************************************************

class TestLevelStats
  attr_reader :test_suites, :test_cases, :ts_passed, :ts_failed, :ts_passed_per, :ts_failed_per, :tc_passed, :tc_failed, :tc_ignored, :tc_passed_per, :tc_failed_per, :tc_ignored_per, :result
  attr_writer :test_suites, :test_cases, :ts_passed, :ts_failed, :ts_passed_per, :ts_failed_per, :tc_passed, :tc_failed, :tc_ignored, :tc_passed_per, :tc_failed_per, :tc_ignored_per, :result
  def initialize()
	@test_suites = 0
	@ts_passed = 0
	@ts_failed = 0

	@test_cases = 0
	@tc_passed = 0
	@tc_failed = 0
	@tc_ignored = 0

	@ts_passed_per	 = 0
	@ts_failed_per   = 0
	@tc_passed_per   = 0
	@tc_failed_per   = 0
	@tc_ignored_per  = 0

	@result  = "Unknown"
  end

  def to_s()
    stats_string = "Stats: "
	stats_string += "TS:" + @test_suites.to_s
	stats_string += ", TSP:" + @ts_passed.to_s
	stats_string += ", TSF:" + @ts_failed.to_s
	stats_string += ", TC:" + @test_cases.to_s
	stats_string += ", TCP:" + @tc_passed.to_s
	stats_string += ", TCF:" + @tc_failed.to_s
	stats_string += ", TCI:" + @tc_ignored.to_s
	stats_string += ", TSP%:" + @ts_passed_per.to_s
	stats_string += ", TSF%:" + @ts_failed_per.to_s
	stats_string += ", TCP%:" + @tc_passed_per.to_s
	stats_string += ", TCF%:" + @tc_failed_per.to_s
	stats_string += ", TCI%:" + @tc_ignored_per.to_s
  end
end

class TestStats
  attr_reader :tests, :passed, :failed, :ignored, :ts_failed, :ts_ignored, :ts_passed, :unit_test, :sw_int_test, :sw_test, :scenario_test, :other_test
  attr_writer :ts_failed, :ts_ignored, :ts_passed
  def initialize(list_test_suites, list_test_cases, tests, passed, failed, ignored)
    @tests = tests
    @passed = passed
    @failed = failed
    @ignored = ignored
    @ts_passed = 0
    @ts_failed = 0
    @ts_ignored = 0

	@unit_test = update_test_stats(list_test_suites, list_test_cases, "unit_test")
	@sw_int_test = update_test_stats(list_test_suites, list_test_cases, "int_test")
	@sw_test = update_test_stats(list_test_suites, list_test_cases, "sw_test")
	@scenario_test = update_test_stats(list_test_suites, list_test_cases, "scenario_test")

	@other_test = update_test_stats(list_test_suites, list_test_cases, "other")

	#puts @unit_test
	#puts @sw_int_test
	#puts @sw_test
	#puts @scenario_test


  end

  def update_test_stats(list_test_suites, list_test_cases, test_level)
  	result = TestLevelStats.new()

	if( test_level == "other" )
		excluded_test_levels = ["unit_test", "int_test", "sw_test", "scenario_test"]
		test_suites = list_test_suites
		test_cases = list_test_cases

		excluded_test_levels.each do |excluded|
			test_suites = test_suites.reject { |test_suite| ( test_suite.test_level == excluded ) }
			test_cases = test_cases.reject { |test_case| ( test_case.test_level == excluded ) }
		end

		# puts test_suites
	else
		test_suites = list_test_suites.select { |test_suite| test_suite.test_level.include?(test_level) }
		test_cases = list_test_cases.select { |test_case| test_case.test_level.include?(test_level) }
	end

	result.test_suites = test_suites.length
	result.ts_passed = test_suites.select{ |test_suite| test_suite.result.include?("Pass") }.length
	result.ts_failed = test_suites.select{ |test_suite| test_suite.result.include?("Fail") }.length

	if( result.test_suites > 0 )
		result.ts_passed_per   = ( result.ts_passed * 100 ) / result.test_suites
		result.ts_failed_per   = ( result.ts_failed * 100 ) / result.test_suites
	end

	result.test_cases = test_cases.length
	result.tc_passed = test_cases.select{ |test_case| test_case.result.include?("Pass") }.length
	result.tc_failed = test_cases.select{ |test_case| test_case.result.include?("Fail") }.length
	result.tc_ignored = test_cases.select{ |test_case| test_case.result.include?("Ignored") }.length

	if( result.test_cases > 0 )
		result.tc_passed_per   = ( result.tc_passed * 100 ) / result.test_cases
		result.tc_failed_per   = ( result.tc_failed * 100 ) / result.test_cases
		result.tc_ignored_per  = ( result.tc_ignored * 100 ) / result.test_cases
	end

	if( result.tc_failed > 0 )
		result.result = "Fail"
	elsif( result.tc_passed > 0 )
		result.result = "Pass"
	else
		result.result = "Ignored"
	end

	return( result )
  end

  def to_s()
    stats_string = "tests: " + tests.to_s + ", passed: " + passed.to_s + ", failed: " + failed.to_s + ", ignored: " + ignored.to_s
  end

end

#***************************************************************************************************
#   \brief          Formats the way that sets of test suites print out
#***************************************************************************************************
class Set
    def to_s
      to_a.join(', ')
    end
end

#***************************************************************************************************
#   \brief          Main Program
#***************************************************************************************************
# Command Line Support ###############################
if ($0 == __FILE__)

  # Extract options!
  options = {}
  begin
    options = Docopt::docopt(DOC_OPT)
  rescue Docopt::Exit => e
    puts e.message
    exit
  end

	creator = CeedlingResultsHTMLCreator.new( options['<CeedlingReportFile.xml>'], options['<CeedlingReportFile.html>'] )
	creator.create_test_case_list
	creator.create_test_suite_list
	creator.update_stats
	creator.convert_results_erb_html_file
  creator.output_yml_summary

end
