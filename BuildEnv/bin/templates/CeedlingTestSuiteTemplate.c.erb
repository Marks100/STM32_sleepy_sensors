/*! \file
*
*   \brief      Test suite for User Story: <%= @feature.name %>
*               <%= @feature.description %>
*/
/* =================================== COPYRIGHT NOTICE ============================================
* The contents of this document are protected under copyright and contain commercially and/or
* technically confidential information. The content of this document must not be used other than
* for the purpose for which it was provided nor may it be disclosed or copied (by the authorised
* recipient or otherwise) without the prior written consent of an authorised officer of Sensata
*
*   Copyright <%= Time.now.year %> Sensata Technologies.
*
***************************************************************************************************/

/***************************************************************************************************
**                              Ceedling General Guidelines                                       **
***************************************************************************************************/
// 1: Coding within test suites should be self documenting and should be easily understood by
//     Systems or Systems verification engineers to allow them to participate in reviews
// 2: Complex test cases should be re-factored and code / test steps that can be reused placed into
//     separate functions
// 3: Where an input has large range of values, equivalence test should be used to partition
// 4: Where acceptance criteria specifies a threshold or limit, boundary testing should be used to
//     test in and around each threshold
// 5: Test cases should cover Sad paths even if not considered in the acceptance / verification
//     criteria

/***************************************************************************************************
**                              Software Tests Guidelines                                         **
***************************************************************************************************/
// Software Testing tests against User Story Acceptance Criteria.
// 1: One test suite per user story
// 2: Test suite naming convention is "test_<US|PR>_<SITS Issue Id>_<SITS Summary>.c"
// 3: Test case names should clearly identify what User Story Acceptance Criteria they are testing
//     against
// 4: Test cases are not permitted to poke values into modules using internal interfaces.
//     Only external interfaces may be stimulated
// 5: Majority of modules should be linked.
// 6: Only outer interfaces my be stubbed

/***************************************************************************************************
**                              Includes                                                          **
***************************************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "C_defs.h"

// Include the Unity test framework. This creates a "test runner" for the
// module tests which includes the "main()" function.
#include "unity.h"

// BEGIN_AUTO_INSERTED_HEADERS - Do not change or move

// The following includes cause the corresponding .h file to be built.  These are required for this
// integration test module to be compiled into an executable.  If you have a c file that does not have
// a corresponding .h file, please place an empty dummy .h file in the support folder.
// Supporting files

// Core library files
#include "MODA.h"

// END_AUTO_INSERTED_HEADERS - Do not change or move

// Private includes

/***************************************************************************************************
** Private functions / Test Step definitions                                                      **
***************************************************************************************************/
static u8_t test_step_example( u8_t para1 );

/*!*************************************************************************************************
*
*   \brief      Background Steps:<% step_num = 1 %><% @feature.background_steps.each do |step| %>
*               <%= step_num %>:<%= step.line %> <%= step.keyword %><%= step.name %><% step_num += 1 %><% end %>
*
*   \note       setUp() is called by the generated runner before each test case function
*
*   \author     <%=ENV['BENV_USERNAME']%>
*
***************************************************************************************************/
void setUp(void)
{
    // Background Steps:<% step_num = 1 %><% @feature.background_steps.each do |step| %>
    // <%= step_num %>:<%= step.line %> <%= step.keyword %><%= step.name %>
    TEST_FAIL_MESSAGE("Background step <%= step_num %>:<%= step.line %> to be implemented");
    <% step_num += 1 %><% end %>
}

/*!*************************************************************************************************
*
*   \brief      Brief description of any tear down steps to be executed at the end of each test case
*
*   \note       tearDown() is called by the generated runner after each test case function
*
*   \author     <%=ENV['BENV_USERNAME']%>
*
***************************************************************************************************/
void tearDown(void)
{
}

/***************************************************************************************************
**                              Test Cases                                                        **
***************************************************************************************************/

<% @feature.scenario_outlines.each do |scenario| %>
<% scenario.examples.each do |example| %>
// <%= example.name %>
typedef struct <%= example.name.camelize.strip_punctuation %>
{
<% example.table[0].data.each do |header| %>
    u8_t <%= header %>;<% end %>
}<%= example.name.camelize.strip_punctuation %>_st

const <%= example.name.camelize.strip_punctuation %>_st <%= example.name.camelize.strip_punctuation %>_c[] =
{
<% example.table.each do |row| %>
    <%= row.data %><% end %>
};<% end %>

/*!*************************************************************************************************
*
*   \brief      <%= scenario.name %>
*               <%= scenario.description %>
*               <% step_num = 1 %>Test Steps:<% scenario.steps.each do |step| %>
*               <%= step_num %>:<%= step.line %> <%= step.keyword %><%= step.name %><% step_num += 1 %><% end %>
*
*   \author     <%=ENV['BENV_USERNAME']%>
*
***************************************************************************************************/
void test_<%= scenario.name.camelize.strip_punctuation %>( void )
{
    <% step_num = 1 %><% scenario.steps.each do |step| %>
    // <%= step_num %>:<%= step.line %> <%= step.keyword %><%= step.name %>
    TEST_FAIL_MESSAGE("Test step <%= step_num %>:<%= step.line %> to be implemented");
    <% step_num += 1 %><% end %>
}
<% end %>

/***************************************************************************************************
** Test Steps: test steps that are reused by several test cases within this test suite            **
***************************************************************************************************/

/*!*************************************************************************************************
*
*   \brief      Description of Test Step
*
*   \author     <%=ENV['BENV_USERNAME']%>
*
*   \param      para1 - description of para1
*
*   \return     description of return
*
***************************************************************************************************/
static u8_t test_step_example( u8_t para1 )
{
    return( 0xFFu );
}

/****************************** END OF FILE *******************************************************/
